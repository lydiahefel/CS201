---
title: "Dashboard Prep"
format: html
editor: visual
---

## HW #7: Dashboard Prep

You've looked at different types of data, conducted exploratory data analysis, manipulated data with dplyr and other tidy methods, created maps.... Now it's time to think about your flexdashboard final project!

## Libraries 

```{r, message = FALSE}
library(here)
library(janitor)
library(plotly)
library(ggiraph)
library(dplyr)
```

## Data

What data are you planning to use? Describe the data here and read it in below.

-   Olympic data that covers individual athletes - their id, name, sex, height, weight, represented country, sport, event, and medal placement. The data includes the season, year, and location of each Olympic attendance.

-   <https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results>

```{r, message = FALSE}
olympics <- read_csv(here("data/athlete_events.csv"))

olympics <- olympics %>% 
  clean_names()
```

## Variables of interest

Which variables are interesting to you? What kinds of questions will you be asking as you look into this data? What story is your data telling? Please include three questions here. The code chunk below is optional.

-   The main variables of interest include sex, age, year, country, sport, and medal placement.

-   How does participation compare between male and female athletes over the years?

-   How does the age of participants change over the years?

-   How does the age of participants relate to the sex of participants?

-   How is male verse female participation impacted by sport?

-   How is male verse female participation impacted by country (national olympic committee)?

```{r}
unique(olympics$sex)

unique(olympics$age)

unique(olympics$year)

unique(olympics$noc)

unique(olympics$sport)

unique(olympics$medal)
```

## Plots

You can present plots as "answers" to your exploratory questions above. You'll need to generate at least three types of plots to put on your dashboard. At least one of them should be interactive using plotly or girafe. Test them out here, include the accompanying questions that they answer, and explain why/how the plot answers that question.

These can look really basic right now. We'll talk more about themes and layers next week.

### Bar Charts

#### Gender by Age

```{r, warning = FALSE}
# age_plot <- ggplot(olympics, aes(x = age, fill = sex)) +
#   geom_bar()
# 
# ggplotly(age_plot)
```

#### Gender by Year

```{r}
# year_plot <- ggplot(olympics, aes(x = year, fill = sex)) +
#   geom_bar() +
#   facet_wrap(~season)
# 
# ggplotly(year_plot)
```

#### Medal Count by Gender

```{r}
# medal_plot <- olympics %>% 
#   dplyr::filter(!is.na(medal)) %>% 
#   ggplot(aes(x = noc, fill = sex)) +
#   geom_bar() +
#   facet_wrap(~medal)
# 
# ggplotly(medal_plot)
```

#### Gender by Country and Medal

```{r}
# gold_plot <- olympics %>% 
#   dplyr::filter(medal == "Gold") %>% 
#   ggplot(aes(x = noc, fill = sex)) +
#   geom_bar() +
#   theme(axis.text.x = element_text(angle = 90, size = 2)) +
#   facet_wrap(~sex)
# 
# silver_plot <- olympics %>% 
#   dplyr::filter(medal == "Silver") %>% 
#   ggplot(aes(x = noc, fill = sex)) +
#   geom_bar() +
#   theme(axis.text.x = element_text(angle = 90, size = 2)) +
#   facet_wrap(~sex)
# 
# bronze_plot <- olympics %>% 
#   dplyr::filter(medal == "Bronze") %>% 
#   ggplot(aes(x = noc, fill = sex)) +
#   geom_bar() +
#   theme(axis.text.x = element_text(angle = 90, size = 5)) +
#   facet_wrap(~sex)
# 
# ggplotly(gold_plot)
# ggplotly(silver_plot)
# ggplotly(bronze_plot)
```

#### Sports by Season and Gender

-   The two visuals below display the comparison of male versus female participation in each sport, separated the sports by season. These visuals help break participation down, shows which sports have more female participants, more male participants, or equal participation. These visuals do not account for the repeat occurrences of athletes that participated in multiple events of the same sport.

```{r}
winter_sport_plot <- olympics %>% 
  dplyr::filter(season == "Winter") %>% 
  ggplot(aes(x = sport, fill = sex)) +
  geom_bar() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(~sex)

summer_sport_plot <- olympics %>% 
  dplyr::filter(season == "Summer") %>% 
  ggplot(aes(x = sport, fill = sex)) +
  geom_bar() +
  theme(axis.text.x = element_text(angle = 90, size = 5)) +
  facet_wrap(~sex)

ggplotly(winter_sport_plot)
ggplotly(summer_sport_plot)
```

### Scatter Plot - Height and Weight by Gender

-   The visual below plots the height and weight of each participant, separated by the gender of each participants. Height and weight are the only numeric, non-factored variables in this data set.

```{r, warning = FALSE}
height_weight_plot <- ggplot(olympic_data, aes(x = weight, y = height, color = sex)) +
  geom_point() +
   facet_wrap(~sex)

#ggplotly(height_weight_plot) #lots of data - slows down r
```

### Line Graph - Height and Weight by Gender

-   The visual below plots the height and weight of each participant, separated by the gender of each participants. This visual shows the trend of height and weight by gender a little more clearly than the previous scatter plot. Since the data set is so robust, this line graph better shows height and weight combinations that tend to be further out of the ordinary for athletes.

```{r, warning = FALSE}
ggplot(olympic_data, aes(x = weight, y = height, color = sex)) +
  geom_line(stat = "summary", fun = mean, group = 1) +
  facet_wrap(~sex)
```

## flexdashboards

Do some research online about what flexdashboards are and what they look like. See if you can find some examples of existing dashboards and layouts. Describe here what single-page layout(s) you want to try. Please make sure you include space for at least three plots and at least one descriptive panel.

-   The title at the top, then below the descriptive panel that stretches across the dashboard. The three plots would be split one on the left and two on the right. The two on the right would be half the size of the one on the left, and would be stacked, one above the other.

**Important note**: You'll find some pretty neat interactive dashboards that incorporate shiny apps. We will not be covering that in this class, so please don't attempt it (...unless you really want to?)

What projects have you found that look nice/doable?

-   "linked time-series with dygraphs"

-   "sales report with highcharter"

-   "leaflet with nuclear sites"

-   all found at: <https://rstudio.github.io/flexdashboard/articles/examples.html>

What layout(s) do you think you want to apply?

-   chart stack (scrolling)

-   focal chart (top or left)

-   tabset row

-   all found at: <https://pkgs.rstudio.com/flexdashboard/articles/layouts.html>
